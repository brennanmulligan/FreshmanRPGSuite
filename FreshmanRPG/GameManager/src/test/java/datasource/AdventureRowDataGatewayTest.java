package datasource;

import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import criteria.AdventureCompletionCriteria;
import criteria.CriteriaStringDTO;
import criteria.GameLocationDTO;
import dataENUM.AdventureCompletionType;
import datatypes.Position;
import datatypes.AdventuresForTest;
import datatypes.QuestsForTest;

/**
 * Tests the functionality of AdventureRowDataGateway.
 */
public abstract class AdventureRowDataGatewayTest extends DatabaseTest
{
	private AdventureRowDataGateway gateway;

	/**
	 * Resets the gateway.
	 *
	 * @throws DatabaseException - unable to find record
	 */
	@Before
	public void setUp() throws DatabaseException
	{
		gateway = this.findGateway(1, 1);
		gateway.resetData();
	}

	/**
	 * Make sure any static information is cleaned up between tests.
	 */
	@After
	public void cleanup()
	{
		if (gateway != null)
		{
			gateway.resetData();
		}
	}

	/**
	 * Should be able to find an existing record.
	 *
	 * @throws DatabaseException - if record not found
	 */
	@Test
	public void finder() throws DatabaseException
	{
		final AdventuresForTest adventure = AdventuresForTest.EXPLORING_FIND_QUIZNASIUM;
		gateway = findGateway(adventure.getQuestID(), adventure.getAdventureID());

		assertEquals(adventure.getAdventureDescription(), gateway.getAdventureDescription());
		assertEquals(adventure.getQuestID(), gateway.getQuestID());
		assertEquals(adventure.getExperiencePointsGained(), gateway.getExperiencePointsGained());
		assertEquals(adventure.getCompletionType(), gateway.getCompletionType());
		assertEquals(adventure.getCompletionCriteria(), gateway.getCompletionCriteria());
	}

	/**
	 * Finder should throw an exception if record not found.
	 *
	 * @throws DatabaseException - if record not found (what we want)
	 */
	@Test(expected = DatabaseException.class)
	public void finderInvalid() throws DatabaseException
	{
		findGateway(8000, -788);
	}

	/**
	 * Should be able to create a new record.
	 *
	 * @throws DatabaseException - if problem in data source
	 */
	@Test
	public void testCreateConstructor() throws DatabaseException
	{
		final int adventureId = 8;
		final String adventureDescription = "Super awesome and exciting adventure";
		final int questId = QuestsForTest.CHAT_TO_AN_NPC_QUEST.getQuestID();
		final int experiencePoints = 9001;
		final AdventureCompletionType type =
				AdventuresForTest.EXPLORING_FIND_QUIZNASIUM.getCompletionType();
		final AdventureCompletionCriteria criteria = AdventuresForTest.EXPLORING_FIND_QUIZNASIUM
				.getCompletionCriteria();
		createGateway(adventureId, adventureDescription, questId, experiencePoints, type, criteria);
		final AdventureRowDataGateway gateway = findGateway(questId, adventureId);

		assertEquals(adventureId, gateway.getAdventureId());
		assertEquals(adventureDescription, gateway.getAdventureDescription());
		assertEquals(questId, gateway.getQuestID());
		assertEquals(experiencePoints, gateway.getExperiencePointsGained());
		assertEquals(type, gateway.getCompletionType());
		assertEquals(criteria, gateway.getCompletionCriteria());
	}

	/**
	 * Should be able to create a new record and the adventure ID is generated by the
	 * data source layer.
	 *
	 * @throws DatabaseException - if problem in data source
	 */
	@Test
	public void testCreateConstructorNoAdventureID() throws DatabaseException
	{
		final String adventureDescription = "Super awesome and exciting adventure";
		final int questId = QuestsForTest.CHAT_TO_AN_NPC_QUEST.getQuestID();
		final int experiencePoints = 9001;
		final AdventureCompletionType type =
				AdventuresForTest.EXPLORING_FIND_QUIZNASIUM.getCompletionType();
		final AdventureCompletionCriteria criteria = AdventuresForTest.EXPLORING_FIND_QUIZNASIUM
				.getCompletionCriteria();
		final int adventureId =
				createGatewayNoID(adventureDescription, questId, experiencePoints, type, criteria);

		final AdventureRowDataGateway gateway = findGateway(questId, adventureId);

		assertEquals(adventureId, gateway.getAdventureId());
		assertEquals(adventureDescription, gateway.getAdventureDescription());
		assertEquals(questId, gateway.getQuestID());
		assertEquals(experiencePoints, gateway.getExperiencePointsGained());
		assertEquals(type, gateway.getCompletionType());
		assertEquals(criteria, gateway.getCompletionCriteria());
	}

	/**
	 * Should be able to create a new record.
	 *
	 * @throws DatabaseException - if problem in data source
	 */
	@Test
	public void testPersist() throws DatabaseException
	{
		final AdventuresForTest adventure = AdventuresForTest.EXPLORING_FIND_QUIZNASIUM;
		gateway = findGateway(adventure.getQuestID(), adventure.getAdventureID());
		gateway.setAdventureDescription("New description");
		gateway.persist();
		assertEquals(findGateway(adventure.getQuestID(), adventure.getAdventureID()).getAdventureDescription(), "New description");

		gateway.setCompletionCriteria(new GameLocationDTO("homework.tmx", new Position(48, 24)));
		gateway.persist();
		assertEquals(findGateway(adventure.getQuestID(), adventure.getAdventureID()).getCompletionCriteria(), new GameLocationDTO("homework.tmx", new Position(48, 24)));

		gateway.setCompletionType(AdventureCompletionType.KEYSTROKE);
		gateway.setCompletionCriteria(new CriteriaStringDTO("q"));
		gateway.persist();
		assertEquals(findGateway(adventure.getQuestID(), adventure.getAdventureID()).getCompletionType(), AdventureCompletionType.KEYSTROKE);

		gateway.setExperiencePointsGained(10);
		gateway.persist();
		assertEquals(findGateway(adventure.getQuestID(), adventure.getAdventureID()).getExperiencePointsGained(), 10);
	}

	/**
	 * Should be able to remove a record.
	 *
	 * @throws DatabaseException - if record not found
	 */
	@Test(expected = DatabaseException.class)
	public void testRemove() throws DatabaseException
	{
		final int adventureID = AdventuresForTest.EXPLORING_FIND_QUIZNASIUM.getAdventureID();
		final int questID = AdventuresForTest.EXPLORING_FIND_QUIZNASIUM.getQuestID();
		gateway = findGateway(questID, adventureID);
		gateway.removeAdventure();

		// this should throw an exception because we just removed the adventure
		findGateway(questID, adventureID);
	}

	/**
	 * Will call appropriate creation constructor.
	 *
	 * @param adventureId - ID of this adventure
	 * @param adventureDescription - description for adventure
	 * @param questId - quest ID adventure belongs to
	 * @param experiencePointsGained - experience points gained upon completion of adventure
	 * @param adventureCompletionType - adventure completion type
	 * @param adventureCompletionCriteria - adventure completion criteria
	 * @throws DatabaseException - if problem in data source
	 */
	abstract void createGateway(int adventureId, String adventureDescription, int questId,
								int experiencePointsGained, AdventureCompletionType adventureCompletionType,
								AdventureCompletionCriteria adventureCompletionCriteria) throws DatabaseException;

	/**
	 * Will call appropriate creation constructor (adventure ID generated in data source).
	 *
	 * @param adventureDescription - description for adventure
	 * @param questId - quest ID adventure belongs to
	 * @param experiencePointsGained - experience points gained upon completion of adventure
	 * @param adventureCompletionType - adventure completion type
	 * @param adventureCompletionCriteria - adventure completion criteria
	 * @return the id of the adventure that got created
	 * @throws DatabaseException - if problem in data source
	 */
	abstract int createGatewayNoID(String adventureDescription, int questId,
								   int experiencePointsGained, AdventureCompletionType adventureCompletionType,
								   AdventureCompletionCriteria adventureCompletionCriteria) throws DatabaseException;

	/**
	 * Will call appropriate finder constructor and return an instance of that gateway.
	 *
	 * @param questId - quest ID adventure belongs to
	 * @param adventureId - ID of this adventure
	 * @return an instance of AdventureRowDataGateway
	 * @throws DatabaseException - if problem in data source
	 */
	abstract AdventureRowDataGateway findGateway(int questId, int adventureId) throws DatabaseException;

}
