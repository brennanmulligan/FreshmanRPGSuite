package datasource;

import static org.junit.Assert.assertEquals;

import dataENUM.ObjectiveCompletionType;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import criteria.ObjectiveCompletionCriteria;
import criteria.CriteriaStringDTO;
import criteria.GameLocationDTO;
import datatypes.Position;
import datatypes.ObjectivesForTest;
import datatypes.QuestsForTest;

/**
 * Tests the functionality of ObjectiveRowDataGateway.
 */
public abstract class ObjectiveRowDataGatewayTest extends DatabaseTest
{
	private ObjectiveRowDataGateway gateway;

	/**
	 * Resets the gateway.
	 *
	 * @throws DatabaseException - unable to find record
	 */
	@Before
	public void setUp() throws DatabaseException
	{
		gateway = this.findGateway(1, 1);
		gateway.resetData();
	}

	/**
	 * Make sure any static information is cleaned up between tests.
	 */
	@After
	public void cleanup()
	{
		if (gateway != null)
		{
			gateway.resetData();
		}
	}

	/**
	 * Should be able to find an existing record.
	 *
	 * @throws DatabaseException - if record not found
	 */
	@Test
	public void finder() throws DatabaseException
	{
		final ObjectivesForTest objective = ObjectivesForTest.EXPLORING_FIND_REC_CENTER;
		gateway = findGateway(objective.getQuestID(), objective.getObjectiveID());

		assertEquals(objective.getObjectiveDescription(), gateway.getObjectiveDescription());
		assertEquals(objective.getQuestID(), gateway.getQuestID());
		assertEquals(objective.getExperiencePointsGained(), gateway.getExperiencePointsGained());
		assertEquals(objective.getCompletionType(), gateway.getCompletionType());
		assertEquals(objective.getCompletionCriteria(), gateway.getCompletionCriteria());
	}

	/**
	 * Finder should throw an exception if record not found.
	 *
	 * @throws DatabaseException - if record not found (what we want)
	 */
	@Test(expected = DatabaseException.class)
	public void finderInvalid() throws DatabaseException
	{
		findGateway(8000, -788);
	}

	/**
	 * Should be able to create a new record.
	 *
	 * @throws DatabaseException - if problem in data source
	 */
	@Test
	public void testCreateConstructor() throws DatabaseException
	{
		final int objectiveId = 8;
		final String objectiveDescription = "Super awesome and exciting objective";
		final int questId = QuestsForTest.CHAT_TO_AN_NPC_QUEST.getQuestID();
		final int experiencePoints = 9001;
		final ObjectiveCompletionType type =
				ObjectivesForTest.EXPLORING_FIND_REC_CENTER.getCompletionType();
		final ObjectiveCompletionCriteria criteria = ObjectivesForTest.EXPLORING_FIND_REC_CENTER
				.getCompletionCriteria();
		createGateway(objectiveId, objectiveDescription, questId, experiencePoints, type, criteria);
		final ObjectiveRowDataGateway gateway = findGateway(questId, objectiveId);

		assertEquals(objectiveId, gateway.getObjectiveID());
		assertEquals(objectiveDescription, gateway.getObjectiveDescription());
		assertEquals(questId, gateway.getQuestID());
		assertEquals(experiencePoints, gateway.getExperiencePointsGained());
		assertEquals(type, gateway.getCompletionType());
		assertEquals(criteria, gateway.getCompletionCriteria());
	}

	/**
	 * Should be able to create a new record and the objective ID is generated by the
	 * data source layer.
	 *
	 * @throws DatabaseException - if problem in data source
	 */
	@Test
	public void testCreateConstructorNoObjectiveID() throws DatabaseException
	{
		final String objectiveDescription = "Super awesome and exciting objective";
		final int questId = QuestsForTest.CHAT_TO_AN_NPC_QUEST.getQuestID();
		final int experiencePoints = 9001;
		final ObjectiveCompletionType type =
				ObjectivesForTest.EXPLORING_FIND_REC_CENTER.getCompletionType();
		final ObjectiveCompletionCriteria criteria = ObjectivesForTest.EXPLORING_FIND_REC_CENTER
				.getCompletionCriteria();
		final int objectiveId =
				createGatewayNoID(objectiveDescription, questId, experiencePoints, type, criteria);

		final ObjectiveRowDataGateway gateway = findGateway(questId, objectiveId);

		assertEquals(objectiveId, gateway.getObjectiveID());
		assertEquals(objectiveDescription, gateway.getObjectiveDescription());
		assertEquals(questId, gateway.getQuestID());
		assertEquals(experiencePoints, gateway.getExperiencePointsGained());
		assertEquals(type, gateway.getCompletionType());
		assertEquals(criteria, gateway.getCompletionCriteria());
	}

	/**
	 * Should be able to create a new record.
	 *
	 * @throws DatabaseException - if problem in data source
	 */
	@Test
	public void testPersist() throws DatabaseException
	{
		final ObjectivesForTest objective = ObjectivesForTest.EXPLORING_FIND_REC_CENTER;
		gateway = findGateway(objective.getQuestID(), objective.getObjectiveID());
		gateway.setObjectiveDescription("New description");
		gateway.persist();
		assertEquals(findGateway(objective.getQuestID(), objective.getObjectiveID()).getObjectiveDescription(), "New description");

		gateway.setCompletionCriteria(new GameLocationDTO("library.tmx", new Position(48, 24)));
		gateway.persist();
		assertEquals(findGateway(objective.getQuestID(), objective.getObjectiveID()).getCompletionCriteria(), new GameLocationDTO("library.tmx", new Position(48, 24)));

		gateway.setCompletionType(ObjectiveCompletionType.KEYSTROKE);
		gateway.setCompletionCriteria(new CriteriaStringDTO("q"));
		gateway.persist();
		assertEquals(findGateway(objective.getQuestID(), objective.getObjectiveID()).getCompletionType(), ObjectiveCompletionType.KEYSTROKE);

		gateway.setExperiencePointsGained(10);
		gateway.persist();
		assertEquals(findGateway(objective.getQuestID(), objective.getObjectiveID()).getExperiencePointsGained(), 10);
	}

	/**
	 * Should be able to remove a record.
	 *
	 * @throws DatabaseException - if record not found
	 */
	@Test(expected = DatabaseException.class)
	public void testRemove() throws DatabaseException
	{
		final int objectiveID = ObjectivesForTest.EXPLORING_FIND_REC_CENTER.getObjectiveID();
		final int questID = ObjectivesForTest.EXPLORING_FIND_REC_CENTER.getQuestID();
		gateway = findGateway(questID, objectiveID);
		gateway.removeObjective();

		// this should throw an exception because we just removed the objective
		findGateway(questID, objectiveID);
	}

	/**
	 * Will call appropriate creation constructor.
	 *
	 * @param objectiveId - ID of this objective
	 * @param objectiveDescription - description for objective
	 * @param questId - quest ID objective belongs to
	 * @param experiencePointsGained - experience points gained upon completion of objective
	 * @param objectiveCompletionType - objective completion type
	 * @param objectiveCompletionCriteria - objective completion criteria
	 * @throws DatabaseException - if problem in data source
	 */
	abstract void createGateway(int objectiveId, String objectiveDescription, int questId,
								int experiencePointsGained, ObjectiveCompletionType objectiveCompletionType,
								ObjectiveCompletionCriteria objectiveCompletionCriteria) throws DatabaseException;

	/**
	 * Will call appropriate creation constructor (objective ID generated in data source).
	 *
	 * @param objectiveDescription - description for objective
	 * @param questId - quest ID objective belongs to
	 * @param experiencePointsGained - experience points gained upon completion of objective
	 * @param objectiveCompletionType - objective completion type
	 * @param objectiveCompletionCriteria - objective completion criteria
	 * @return the id of the objective that got created
	 * @throws DatabaseException - if problem in data source
	 */
	abstract int createGatewayNoID(String objectiveDescription, int questId,
								   int experiencePointsGained, ObjectiveCompletionType objectiveCompletionType,
								   ObjectiveCompletionCriteria objectiveCompletionCriteria) throws DatabaseException;

	/**
	 * Will call appropriate finder constructor and return an instance of that gateway.
	 *
	 * @param questId - quest ID objective belongs to
	 * @param objectiveId - ID of this objective
	 * @return an instance of ObjectiveRowDataGateway
	 * @throws DatabaseException - if problem in data source
	 */
	abstract ObjectiveRowDataGateway findGateway(int questId, int objectiveId) throws DatabaseException;

}
