package edu.ship.engr.shipsim.communication.packers;

import edu.ship.engr.shipsim.communication.StateAccumulator;
import edu.ship.engr.shipsim.communication.messages.TeleportationContinuationMessage;
import edu.ship.engr.shipsim.datasource.DatabaseException;
import edu.ship.engr.shipsim.datatypes.PlayersForTest;
import edu.ship.engr.shipsim.model.MapToServerMapping;
import edu.ship.engr.shipsim.model.reports.PlayerReadyToTeleportReport;
import edu.ship.engr.shipsim.testing.annotations.GameTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

/**
 * Tests the behavior of TeleportationInitiationPacker.
 */
@GameTest("GameServer")
public class TeleportationContinuationPackerTest
{

    /**
     * Set up the state accumulator and enable testing mode.
     */
    @BeforeEach
    public void localSetUp()
    {
        StateAccumulator stateAccumulator = new StateAccumulator(null);
        stateAccumulator.setPlayerId(PlayersForTest.MERLIN.getPlayerID());
    }

    /**
     * Check if the packer will pack the desired report types.
     */
    @Test
    public void testReportWePack()
    {
        TeleportationContinuationPacker packer = new TeleportationContinuationPacker();
        assertEquals(PlayerReadyToTeleportReport.class, packer.getReportTypesWePack().get(0));
    }

    /**
     * Checks that the message generated by the packer contains the correct data.
     *
     * @throws DatabaseException If there is an error creating the message.
     */
    @Test
    public void testReturnedMessage() throws DatabaseException
    {
        StateAccumulator stateAccumulator = new StateAccumulator(null);
        stateAccumulator.setPlayerId(PlayersForTest.MERLIN.getPlayerID());

        int id = PlayersForTest.MERLIN.getPlayerID();
        PlayerReadyToTeleportReport report = new PlayerReadyToTeleportReport(id, "quad.tmx");
        MapToServerMapping mapping = new MapToServerMapping(report.getMap());
        TeleportationContinuationPacker packer = new TeleportationContinuationPacker();
        packer.setAccumulator(stateAccumulator);

        TeleportationContinuationMessage message = (TeleportationContinuationMessage) packer.pack(report);

        assertEquals(report.getMap(), message.getMapName());
        assertEquals(mapping.getHostName(), message.getHostName());
        assertEquals(mapping.getPortNumber(), message.getPortNumber());
        assertEquals(id, message.getPlayerID());
    }

    /**
     * Tests to make sure that the continuation message only goes to the player who
     * is in the middle of teleporting
     */
    @Test
    public void shouldntPackForOtherAccumulators()
    {
        StateAccumulator stateAccumulator = new StateAccumulator(null);
        stateAccumulator.setPlayerId(PlayersForTest.MARTY.getPlayerID());

        int id = PlayersForTest.MERLIN.getPlayerID();
        PlayerReadyToTeleportReport report = new PlayerReadyToTeleportReport(id, "quad.tmx");
        TeleportationContinuationPacker packer = new TeleportationContinuationPacker();
        packer.setAccumulator(stateAccumulator);

        TeleportationContinuationMessage message = (TeleportationContinuationMessage) packer.pack(report);

        assertNull(message);

    }

}
