package communication.packers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.junit.Before;
import org.junit.Test;

import communication.StateAccumulator;
import communication.messages.TeleportationContinuationMessage;
import datasource.DatabaseException;
import datasource.ServerRowDataGatewayMock;
import model.MapToServerMapping;
import model.OptionsManager;
import model.reports.PlayerReadyToTeleportReport;
import datatypes.PlayersForTest;

/**
 * Tests the behavior of TeleportationInitiationPacker.
 */
public class TeleportationContinuationPackerTest
{
	private StateAccumulator stateAccumulator;

	/**
	 * Set up the state accumulator and enable testing mode.
	 */
	@Before
	public void setUp()
	{
		OptionsManager.getSingleton().setUsingMocKDataSource(true);
		OptionsManager.getSingleton().setUsingTestDB(true);
		stateAccumulator = new StateAccumulator(null);
		stateAccumulator.setPlayerId(PlayersForTest.MERLIN.getPlayerID());
	}

	/**
	 * Check if the packer will pack the desired report types.
	 */
	@Test
	public void testReportWePack()
	{
		TeleportationContinuationPacker packer = new TeleportationContinuationPacker();
		assertEquals(PlayerReadyToTeleportReport.class, packer.getReportTypesWePack().get(0));
	}

	/**
	 * Checks that the message generated by the packer contains the correct data.
	 *
	 * @throws DatabaseException
	 *             If there is an error creating the message.
	 */
	@Test
	public void testReturnedMessage() throws DatabaseException
	{
		new ServerRowDataGatewayMock().resetData();
		StateAccumulator stateAccumulator = new StateAccumulator(null);
		stateAccumulator.setPlayerId(PlayersForTest.MERLIN.getPlayerID());

		int id = PlayersForTest.MERLIN.getPlayerID();
		PlayerReadyToTeleportReport report = new PlayerReadyToTeleportReport(id, "quad.tmx");
		MapToServerMapping mapping = new MapToServerMapping(report.getMap());
		TeleportationContinuationPacker packer = new TeleportationContinuationPacker();
		packer.setAccumulator(stateAccumulator);

		TeleportationContinuationMessage message = (TeleportationContinuationMessage) packer.pack(report);

		assertEquals(report.getMap(), message.getMapName());
		assertEquals(mapping.getHostName(), message.getHostName());
		assertEquals(mapping.getPortNumber(), message.getPortNumber());
		assertEquals(id, message.getPlayerID());
	}

	/**
	 * Tests to make sure that the continuation message only goes to the player who
	 * is in the middle of teleporting
	 *
	 * @throws DatabaseException
	 *             shouldn't
	 */
	@Test
	public void shouldntPackForOtherAccumulators() throws DatabaseException
	{
		new ServerRowDataGatewayMock().resetData();
		StateAccumulator stateAccumulator = new StateAccumulator(null);
		stateAccumulator.setPlayerId(PlayersForTest.MARTY.getPlayerID());

		int id = PlayersForTest.MERLIN.getPlayerID();
		PlayerReadyToTeleportReport report = new PlayerReadyToTeleportReport(id, "quad.tmx");
		TeleportationContinuationPacker packer = new TeleportationContinuationPacker();
		packer.setAccumulator(stateAccumulator);

		TeleportationContinuationMessage message = (TeleportationContinuationMessage) packer.pack(report);

		assertNull(message);

	}

}
