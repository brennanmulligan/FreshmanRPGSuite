// Define a task named "checkForDuplicateClasses"
tasks.register('checkForDuplicateClasses') {
    doLast {
        def duplicates = new MyMultimap()

        subprojects { Project subproject ->
            subproject.sourceSets.each { SourceSet sourceSet ->
                sourceSet.java.sourceDirectories.getFiles().each { File sourceDir ->
                    if (sourceDir.path.contains('main')) {
                        sourceDir.eachFileRecurse { File classFile ->
                            if (classFile.file && classFile.name.endsWith(".java")) {
                                def className = classFile.name.substring(0, classFile.name.indexOf(".java"))
                                def packagePath = classFile.parentFile.absolutePath
                                        .replace(sourceDir.absolutePath, '')
                                        .replaceAll('[\\\\/]', '.')
                                        .substring(1)

                                duplicates.put(className + ":" + packagePath, subproject)
                            }
                        }
                    }
                }
            }
        }

        def outLines = []

        def found = duplicates.search(outLines)

        if (found) {
            throw new RuntimeException(outLines.join('\n'))
        }
    }
}

// Define a class named "MyMultimap"
class MyMultimap {

    // Define an instance variable "map" that is a new empty Map
    Map map = [:]

    // Define a method named "put" that takes a "key" and a "value" as arguments
    boolean put(String key, Project value) {
        // Get the current value for the given key in the map, or an empty list if the key is not present
        List list = map.get(key, []) as List

        // If the list does not already contain the value, add it to the list
        if (!list.contains(value)) {
            list.add(value)
        }

        // Update the map with the new list for the given key
        map."$key" = list
    }

    boolean search(List<String> outLines) {
        def found = false

        map.each { String key, List<Project> value ->
            // If there is more than one subproject that contains the class
            if (value.size() > 1) {
                // Get the class name and package name from the key
                def (name, packageName) = key.tokenize(':')

                // Add information about the duplicate class to the output
                outLines << "Duplicate class found!!"
                outLines << " - Name: $name"
                outLines << " - Package: $packageName"
                outLines << " - Projects: "

                // Add the names of the subprojects containing the class to the output
                value.each { subproject ->
                    outLines << "   - $subproject.name"
                }

                outLines << ""

                // Set found to true
                found = true
            }
        }
    }
}