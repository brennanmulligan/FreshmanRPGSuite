// Mocks generated by Mockito 5.1.0 from annotations
// in frpg_companion/test/features/objective/objective_mock.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:frpg_companion/features/network/network.dart' as _i2;
import 'package:frpg_companion/features/objective/data/data.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeServiceClient_0 extends _i1.Fake implements _i2.ServiceClient {}

class _FakeFetchAllObjectiveResponse_1 extends _i1.Fake
    implements _i3.FetchAllObjectiveResponse {}

class _FakeCompleteObjectiveResponse_2 extends _i1.Fake
    implements _i3.CompleteObjectiveResponse {}

class _FakeCompleteObjectiveDatasource_3 extends _i1.Fake
    implements _i3.CompleteObjectiveDatasource {}

class _FakeFetchAllObjectiveDatasource_4 extends _i1.Fake
    implements _i3.FetchAllObjectiveDatasource {}

class _FakeResult_5<T> extends _i1.Fake implements _i2.Result<T> {}

/// A class which mocks [ServiceClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceClient extends _i1.Mock implements _i2.ServiceClient {
  MockServiceClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseURL =>
      (super.noSuchMethod(Invocation.getter(#baseURL), returnValue: '')
          as String);
  @override
  _i4.Future<Map<String, dynamic>> get(
          {String? endpoint, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [], {#endpoint: endpoint, #headers: headers}),
          returnValue:
              Future<Map<String, dynamic>>.value(<String, dynamic>{})) as _i4
          .Future<Map<String, dynamic>>);
  @override
  _i4.Future<Map<String, dynamic>> post(
          {String? endpoint,
          Map<String, String>? headers,
          Map<String, dynamic>? body}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [], {#endpoint: endpoint, #headers: headers, #body: body}),
          returnValue:
              Future<Map<String, dynamic>>.value(<String, dynamic>{})) as _i4
          .Future<Map<String, dynamic>>);
}

/// A class which mocks [FetchAllObjectiveDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchAllObjectiveDatasource extends _i1.Mock
    implements _i3.FetchAllObjectiveDatasource {
  MockFetchAllObjectiveDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ServiceClient get sc => (super.noSuchMethod(Invocation.getter(#sc),
      returnValue: _FakeServiceClient_0()) as _i2.ServiceClient);
  @override
  _i4.Future<_i3.FetchAllObjectiveResponse> fetchAllObjective(
          {_i3.FetchAllObjectiveRequest? request}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchAllObjective, [], {#request: request}),
              returnValue: Future<_i3.FetchAllObjectiveResponse>.value(
                  _FakeFetchAllObjectiveResponse_1()))
          as _i4.Future<_i3.FetchAllObjectiveResponse>);
}

/// A class which mocks [CompleteObjectiveDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteObjectiveDatasource extends _i1.Mock
    implements _i3.CompleteObjectiveDatasource {
  MockCompleteObjectiveDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ServiceClient get sc => (super.noSuchMethod(Invocation.getter(#sc),
      returnValue: _FakeServiceClient_0()) as _i2.ServiceClient);
  @override
  _i4.Future<_i3.CompleteObjectiveResponse> completeObjective(
          {_i3.CompleteObjectiveRequest? request}) =>
      (super.noSuchMethod(
              Invocation.method(#completeObjective, [], {#request: request}),
              returnValue: Future<_i3.CompleteObjectiveResponse>.value(
                  _FakeCompleteObjectiveResponse_2()))
          as _i4.Future<_i3.CompleteObjectiveResponse>);
}

/// A class which mocks [ObjectiveRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockObjectiveRepository extends _i1.Mock
    implements _i3.ObjectiveRepository {
  MockObjectiveRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CompleteObjectiveDatasource get completeObjectiveDatasource =>
      (super.noSuchMethod(Invocation.getter(#completeObjectiveDatasource),
              returnValue: _FakeCompleteObjectiveDatasource_3())
          as _i3.CompleteObjectiveDatasource);
  @override
  _i3.FetchAllObjectiveDatasource get fetchAllObjectiveDatasource =>
      (super.noSuchMethod(Invocation.getter(#fetchAllObjectiveDatasource),
              returnValue: _FakeFetchAllObjectiveDatasource_4())
          as _i3.FetchAllObjectiveDatasource);
  @override
  _i4.Future<_i2.Result<_i3.CompleteObjectiveResponse>> completeObjective(
          {_i3.CompleteObjectiveRequest? request}) =>
      (super.noSuchMethod(
          Invocation.method(#completeObjective, [], {#request: request}),
          returnValue: Future<_i2.Result<_i3.CompleteObjectiveResponse>>.value(
              _FakeResult_5<_i3.CompleteObjectiveResponse>())) as _i4
          .Future<_i2.Result<_i3.CompleteObjectiveResponse>>);
  @override
  _i4.Future<_i2.Result<_i3.FetchAllObjectiveResponse>> fetchAllObjectives(
          {_i3.FetchAllObjectiveRequest? request}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchAllObjectives, [], {#request: request}),
          returnValue: Future<_i2.Result<_i3.FetchAllObjectiveResponse>>.value(
              _FakeResult_5<_i3.FetchAllObjectiveResponse>())) as _i4
          .Future<_i2.Result<_i3.FetchAllObjectiveResponse>>);
}
